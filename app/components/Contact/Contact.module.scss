@use "../../styles//utils/functions.scss" as fct;
@use "../../styles/utils/variables.scss" as var;

.contact {
  display: flex;
  padding: 5rem 20rem 0rem 20rem;

  @media screen and (max-width: 1400px) {
    padding: 10rem 10rem 0 10rem;
  }

  @media screen and (max-width: var.$breakpoint-tablette) {
    flex-direction: column;
    padding: 10rem 5rem 3rem 5rem;
  }

  @media screen and (max-width: var.$breakpoint-mobile) {
    flex-direction: column;
    align-items: center;
    padding: 5rem 0rem 3rem 0rem;
  }

  .container-formulaire {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    flex: 3;
    position: relative;

    @media screen and (max-width: var.$breakpoint-tablette) {
      justify-content: center;
      flex-direction: column;
    }

    .title {
      font-size: fct.map-deep-get(var.$contact, "fontSize", "title--desktop");
      font-weight: fct.map-deep-get(var.$contact, "fontWeight", "title");
      font-family: fct.map-deep-get(var.$contact, "fontFamily", "title");

      @media screen and (max-width: var.$breakpoint-tablette) {
        font-size: fct.map-deep-get(var.$contact, "fontSize", "title--tablet");
      }

      @media screen and (max-width: var.$breakpoint-mobile) {
        font-size: fct.map-deep-get(var.$contact, "fontSize", "title--mobile");
      }
    }

    .form__contact {
      position: relative;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
      grid-area: form-contact;
      grid-template-areas:
        "lastname firstname"
        "email tel"
        "entilted entilted"
        "message message"
        "send send";

      padding: 2rem;
      border-radius: var.$radius--10;
      justify-items: center;
      align-items: center;
      width: 75rem;

      @media screen and (max-width: var.$breakpoint-tablette) {
        width: 90%;
      }

      @media screen and (max-width: var.$breakpoint-mobile) {
        width: 100%;
        grid-template-columns: repeat(1, minmax(20rem, 37rem));
        grid-template-rows: 7fr;
        gap: 2rem;
        grid-template-areas:
          "lastname"
          "firstname"
          "email"
          "tel"
          "entilted"
          "message"
          "send";
      }

      @mixin gridAreaLabels($gridAreaNames) {
        @for $i from 1 through length($gridAreaNames) {
          &:nth-child(#{$i}) {
            grid-area: nth($gridAreaNames, $i);
            width: 100%;
          }
        }
      }

      .label {
        display: flex;
        align-items: center;
        flex-direction: column;
        font-family: var(--font--archivo);
        font-size: fct.map-deep-get(var.$contact, "fontSize", "label--desktop");
        gap: 0.5rem;

        @media screen and (max-width: var.$breakpoint-tablette) {
          font-size: fct.map-deep-get(
            var.$contact,
            "fontSize",
            "label--tablet"
          );
        }

        @include gridAreaLabels(
          (lastname, firstname, email, tel, entilted, message)
        );

        .errors {
          margin-bottom: 1rem;
          margin-top: 0.5rem;
          font-size: fct.map-deep-get(var.$contact, "fontSize", "errors");
          font-style: italic;
          text-align: center;
        }
      }

      .input {
        border-radius: var.$radius--10;
        width: 100%;
        height: 4rem;
        padding: 1rem;
        border: none;

        &::placeholder {
          font-size: fct.map-deep-get(var.$contact, "fontSize", "placeHolder");
        }
      }

      .textarea {
        padding: 1rem;
        resize: none;
        border-radius: var.$radius--10;
        width: 100%;
        border: none;
        height: 17rem;
        margin-bottom: 1rem;

        &::placeholder {
          font-size: fct.map-deep-get(var.$contact, "fontSize", "placeHolder");
        }
      }

      .send {
        width: 30%;
        height: 4rem;
        font-family: fct.map-deep-get(var.$contact, "fontFamily", "send");
        font-size: fct.map-deep-get(var.$contact, "fontSize", "send--desktop");
        border-radius: var.$radius--10;
        margin-top: 1rem;
        cursor: pointer;
        grid-area: send;
        transition: filter 0.6s;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 1);

        &:hover {
          filter: brightness(120%);
        }

        @media screen and (max-width: var.$breakpoint-mobile) {
          font-size: fct.map-deep-get(var.$contact, "fontSize", "send--mobile");
        }
      }
    }
  }

  .elipse {
    position: absolute;
    z-index: -1;
    top: -6rem;
    left: -3rem;
    width: 20rem;
    height: 65rem;
    border-radius: var.$radius--circle;
    transform: rotate(-30deg);

    @media screen and (max-width: var.$breakpoint-tablette) {
      display: none;
    }
  }

  &--dark {
    background-color: fct.map-deep-get(
      var.$contact--dark,
      "colors",
      "contact--bg"
    );

    .title {
      color: fct.map-deep-get(var.$contact--dark, "colors", "title");
    }

    .label {
      color: fct.map-deep-get(var.$contact--dark, "colors", "label");

      .errors {
        color: fct.map-deep-get(var.$contact--dark, "colors", "errors");
      }
    }

    .input {
      color: fct.map-deep-get(var.$contact--dark, "colors", "input");
      background-color: fct.map-deep-get(
        var.$contact--dark,
        "colors",
        "input--bg"
      );

      &::placeholder {
        color: fct.map-deep-get(var.$contact--dark, "colors", "placeHolder");
      }
    }

    .textarea {
      background-color: fct.map-deep-get(
        var.$contact--dark,
        "colors",
        "input--bg"
      );

      &::placeholder {
        color: fct.map-deep-get(var.$contact--dark, "colors", "placeHolder");
      }
    }

    .send {
      background-color: fct.map-deep-get(
        var.$contact--dark,
        "colors",
        "send--bg"
      );
      color: fct.map-deep-get(var.$contact--dark, "colors", "send");
    }

    .elipse {
      border: 0.1rem solid
        fct.map-deep-get(var.$contact--dark, "colors", "elipse");
    }
  }

  &--light {
    background-color: fct.map-deep-get(
      var.$contact--light,
      "colors",
      "contact--bg"
    );

    .title {
      color: fct.map-deep-get(var.$contact--light, "colors", "title");
    }

    .label {
      color: fct.map-deep-get(var.$contact--light, "colors", "label");

      .errors {
        color: fct.map-deep-get(var.$contact--light, "colors", "errors");
      }
    }

    .input {
      color: fct.map-deep-get(var.$contact--light, "colors", "input");
      background-color: fct.map-deep-get(
        var.$contact--light,
        "colors",
        "input--bg"
      );

      &::placeholder {
        color: fct.map-deep-get(var.$contact--light, "colors", "placeHolder");
      }
    }

    .textarea {
      background-color: fct.map-deep-get(
        var.$contact--light,
        "colors",
        "input--bg"
      );

      &::placeholder {
        color: fct.map-deep-get(var.$contact--light, "colors", "placeHolder");
      }
    }

    .send {
      background-color: fct.map-deep-get(
        var.$contact--light,
        "colors",
        "send--bg"
      );
      color: fct.map-deep-get(var.$contact--light, "colors", "send");
      border: none;
    }

    .elipse {
      border: 0.1rem solid
        fct.map-deep-get(var.$contact--light, "colors", "elipse");
    }
  }
}
